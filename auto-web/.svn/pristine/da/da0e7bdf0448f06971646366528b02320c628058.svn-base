/**
 * 
 */
package com.ccigmall.auto.test.act;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.NoSuchFrameException;
import org.openqa.selenium.NoSuchWindowException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Function;

/**
 * @author jianping.gao
 * 
 */
public class SettingActiton {
	/**
	 * slf4j
	 */
	private final static Logger logger = LoggerFactory
			.getLogger(SettingActiton.class);
	/**
	 * selenium WebElement
	 */
	private WebElement element;

	/**
	 * selenium WebDriver
	 */
	protected WebDriver driver;

	/**
	 * normal wait
	 * 
	 */
	private int second = 1;

	/**
	 * 
	 */
	private int waitSencond = 30;

	/**
	 * 
	 * @param driver
	 */
	public SettingActiton(WebDriver driver) {
		this.driver = driver;
	}

	/**
	 * 打开浏览器
	 * 
	 * @param url
	 */
	public void open(String url) {
		open(url, second);

	}

	/**
	 * 打开浏览器
	 * 
	 * @param url
	 * @param second
	 */
	public void open(String url, int second) {
		this.driver.get(url);
		waitForPageLoad(driver);
	}

	/**
	 * 输入
	 * 
	 * @param element
	 * @param text
	 */
	public void type(WebElement element, String text) {
		type(element, text, second);
	}

	/**
	 * 输入
	 * 
	 * @param element
	 * @param text
	 * @param second
	 */
	public void type(WebElement element, String text, int second) {
		this.element = element;
		this.element.clear();
		this.element.sendKeys(text);
	}

	/**
	 * 点击
	 * 
	 * @param element
	 */
	public void click(WebElement element) {
		click(element, second);
	}

	/**
	 * 点击
	 * 
	 * @param element
	 * @param second
	 */

	public void click(WebElement element, int second) {
		this.element = element;
		this.element.click();	
		waitForPageLoad(driver);
        this.pause(1);
	}

	/**
	 * 获取文本
	 * 
	 * @param element
	 * @return
	 */
	public String getText(WebElement element) {
		String text = null;
		text = element.getText();
		logger.info("{}", text);
		return text;
	}
	
	/**
	 * 获取元素数量个数
	 * 
	 * @param element
	 * @return
	 */
	public int getElementsNum(List<WebElement> element) {
		int number;
		number = element.size();
		logger.info("{}", number);
		return number;
	}
	
	
	/**
	 * select
	 * 
	 * @param element
	 * @param option
	 */
	public void select(WebElement element, String option) {
		Select select = new Select(element);
		select.selectByVisibleText(option);
		logger.info("Select {}", option);
	}
	/**
	 * select
	 * 
	 * @param element
	 * @param option
	 */
	public void selectByIndex(WebElement element, int index) {
		Select select = new Select(element);
		select.selectByIndex(index);
		logger.info("Select {}", index);
	}

	/**
	 * 控制Alert的确认与取消
	 * 
	 * @param flag
	 *            根据传递的参数accept、dismiss，进行相应的操作
	 */
	public void confirmAlert(boolean flag) {
		try {
			Alert alert = driver.switchTo().alert();
			if (alert == null) {
				return;
			}
			if (flag) {
				alert.accept();
			} else {
				alert.dismiss();
			}
			defaultContent();
		} catch (NoAlertPresentException e) {
			return;
		}
	}

	/**
	 * 进入iframe
	 * 
	 * @param element
	 */
	public void enterFrame(WebElement element) {
		driver.switchTo().frame(element);
		logger.info("Entered iframe");
	}

	/**
	 * 进入iframe
	 * 
	 * @param element
	 */
	public void enterFrame(String arg0) {
		driver.switchTo().frame(arg0);
		logger.info("Entered iframe");
	}

	/**
	 * 返回默认Content
	 * 
	 */
	public void defaultContent() {
		driver.switchTo().defaultContent();
	}

	/**
	 * 将焦点跳转到指定的window下
	 * 
	 * @param windowTitle
	 *            要跳转的window的title
	 * @return true/false
	 */
	public boolean switchToWindow(String windowTitle) {
		boolean flag = false;
		try {
			String currentHandle = driver.getWindowHandle();
			Set<String> handles = driver.getWindowHandles();
			for (String s : handles) {
				if (s.equals(currentHandle))
					continue;
				else {
					driver.switchTo().window(s);
					if (driver.getTitle().contains(windowTitle)) {
						flag = true;
						logger.info("Switch to window: " + windowTitle
								+ " successfully!");
						break;
					} else
						continue;
				}
			}
			logger.info("Switch to window {} ", windowTitle);
		} catch (NoSuchWindowException e) {
			logger.info("Failed to switch to window {} ", windowTitle);
			throw new NoSuchFrameException("Failed to switch to window "
					+ windowTitle);
		}
		return flag;
	}

	/**
	 * 程序暂停 time * 1000ms
	 * 
	 * @param time
	 *            要暂停的时间
	 */
	public void pause(int time) {
		try {
			Thread.sleep(time * 1000);
		} catch (InterruptedException e) {
			logger.error("wait loading error ", e);
			return;
		}
	}

	/**
	 * 浏览器刷新
	 */
	public void refresh() {
		try {
			driver.navigate().refresh();
			waitForPageLoad(driver);
			logger.info("Refresh Browser!");
		} catch (WebDriverException e) {
			logger.info("Faile to refresh browser!");
			throw new WebDriverException("Faile to refresh browser!", e);
		}
	}

	/**
	 * 判断页面是否加载完成
	 * 
	 * @return
	 */
	protected Function<WebDriver, Boolean> isPageLoaded() {
		return new Function<WebDriver, Boolean>() {
			@Override
			public Boolean apply(WebDriver driver) {
				return ((JavascriptExecutor) driver).executeScript(
						"return document.readyState").equals("complete");
			}
		};
	}

	/**
	 * 等待页面加载完成
	 */
	public void waitForPageLoad(WebDriver driver) {
		WebDriverWait wait = new WebDriverWait(driver, waitSencond);
		wait.until(isPageLoaded());
	}

	/**
	 * 
	 * @param element
	 * @return
	 */
	private Function<WebDriver, Boolean> haveMoreThanOneOption(
			final WebElement element, final String tag) {
		return new Function<WebDriver, Boolean>() {
			@Override
			public Boolean apply(WebDriver driver) {
				if (element == null) {
					return false;
				} else {
					int size = element.findElements(By.tagName(tag)).size();
					return size >= 1;
				}
			}
		};
	}

	/**
	 * 如果页面有Ajax操作，需要写一个Wait方法等待Ajax操作完成
	 */
	public void waitForDropDownListLoaded(WebElement element, String tag) {
		WebDriverWait wait = new WebDriverWait(driver, 30);
		wait.until(haveMoreThanOneOption(element, tag));
	}

	/**
	 * 判断元素是否存在
	 * 
	 * @param by
	 */
	public boolean isElementPresent(final WebElement element) {
		
		   try {
			      element.isDisplayed();
			      return true;
			    } catch (NoSuchElementException e) {
			      return false;
			    }
		// WebDriverWait wait = (new WebDriverWait(driver, waitSencond));
		// wait.until(new ExpectedCondition<Boolean>() {
		// public Boolean apply(WebDriver d) {
		// boolean loadcomplete = element.isDisplayed();
		// return loadcomplete;
		// }
		// });
	}
	/**
	 * 在time内查找元素 是否存在
	 * @param xpath 
	 * @param time
	 * @return
	 */
	  public boolean isElementExist(String xpath ,int time) { 
		  try { 
		      driver.manage().timeouts().implicitlyWait(time, TimeUnit.SECONDS); 
		      driver.findElement(By.xpath(xpath)); 
		      return true; 
		    } catch (NoSuchElementException e) { 
		     logger.info("在规定时间{}s内，未找到该元素:{}", time , xpath);
		      return false; 
		    } 
		  }
	
	/**
	 * 判断元素是否存在
	 * 
	 * @param by
	 */
	public boolean isElementPresent(final WebElement element, final String text) {
		if (element.isDisplayed()) {
			logger.info("{} == {}", text, element.getText());
			return text.equals(element.getText());
		} else {
			logger.info("{} != {}", text, element.getText());
			return false;
		}
		// WebDriverWait wait = (new WebDriverWait(driver, waitSencond));
		// wait.until(new ExpectedCondition<Boolean>() {
		// public Boolean apply(WebDriver d) {
		// if(element.isDisplayed()){
		// return text.equals(element.getText());
		// }else{
		// return false;
		// }
		// }
		// });
	}

	/**
	 * 执行js
	 * 
	 * @param js
	 * @param element
	 */
	public void jsExecutor(String js, WebElement element) {
		JavascriptExecutor jsExecutor = (JavascriptExecutor) driver;
		jsExecutor.executeScript(js, element);
	}

	/**
	 * 关闭浏览器
	 * 
	 * @param browserType
	 * @throws IOException
	 * @throws AWTException
	 */
	public void closeAllBrowser(int browserType) throws IOException,
			AWTException {
		if (browserType == 2) {
			try {
				Runtime.getRuntime().exec("taskkill /f /im firefox.exe");
			} catch (IOException e) {
				logger.info("close firefox browser IO Exception");
				throw new IOException("close firefox browser IO Exception");
			}
		}
		this.pressKeyboard(KeyEvent.VK_ENTER);

	}

	/**
	 * 键盘输入
	 * 
	 * @param keyCode
	 *            例如： KeyEvent.VK_TAB, KeyEvent.VK_F11
	 * @throws AWTException
	 */
	public void pressKeyboard(int keyCode) throws AWTException {
		Robot rb = null;
		try {
			rb = new Robot();
			rb.keyPress(keyCode); // press key
			rb.delay(100); // delay 100ms
			rb.keyRelease(keyCode); // release key
			logger.info("Pressed key with code " + keyCode);
		} catch (AWTException e) {
			logger.info("Failed to pressKeyboard {} ", keyCode);
			throw new AWTException("Failed to pressKeyboard " + keyCode);
		}
	}

	/**
	 * 彻底浏览器
	 */
	public void quit() {
		try {
			driver.close();
			driver.quit();
			logger.info("quite browser!");
		} catch (WebDriverException e) {
			logger.info("Faile to quite browser!");
			throw new WebDriverException("Faile to quite browser!", e);
		}
	}

	/**
	 * 自动化上传图片 + 图片路径
	 */
	public void robotUpload(String path) {
		Robot robot = null;
		Clipboard sysClip = null;
		Transferable text = null;
		try {
			robot = new Robot();
			 sysClip = Toolkit.getDefaultToolkit()
					.getSystemClipboard();
			 text= new StringSelection(path);
			sysClip.setContents(text, null);

		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_V);
		robot.keyRelease(KeyEvent.VK_V);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.delay(1000);
		robot.mouseMove(100,0);
		robot.keyRelease(KeyEvent.VK_ENTER);
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		robot.mouseMove(0,100);
		robot.delay(1000);
	}

	/**
	 * 自动化上传图片
	 */
	public void robotUpload() {
		Robot robot = null;
		try {
			robot = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_V);
		robot.keyRelease(KeyEvent.VK_V);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robotEnter();
	}

	/**
	 * 拷贝
	 */
	public void robotCopy() {
		Robot robot = null;
		try {
			robot = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_A);
		robot.keyRelease(KeyEvent.VK_A);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		this.pause(1);

		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.keyPress(KeyEvent.VK_C);
		robot.keyRelease(KeyEvent.VK_C);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		this.pause(1);
	}

	/**
	 * 回车
	 */
	public void robotEnter() {
		Robot robot = null;
		try {
			robot = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.pause(1);
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		this.pause(2);
	}
/**
 * 用例执行成功/失败时 进行截图
 * @param desc 截图名称描述
 */
	public  void failScreenShot(String desc) {
		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		Date date =new Date();
		String dateString = new SimpleDateFormat("yyyyMMdd-HHmmss").format(date);
		desc = desc.trim().equals("") ? "" : "-" + desc.trim();
		logger.info("开始截图，名称{}",dateString + desc + ".png");
		File screenshot = new File("test-output"+File.separator+"failScreenShot" + File.separator+ dateString + desc + ".png");
		try {
			FileUtils.copyFile(scrFile, screenshot);
		} catch (IOException e) {
			logger.error("截图操作失败"+e.getMessage());
		}

	}

	/**
	 * 通过Xpath查找元素集合
	 * 
	 * @param Xpath
	 * @return
	 */
	public List<WebElement> getElementsByXpath(String Xpath) {

		List<WebElement> elements = null;
		try {
			elements = driver.findElements(By.xpath(Xpath));
			logger.info("Elements exist by xpath {} ", Xpath);
		} catch (NoSuchElementException e) {
			logger.info("Elements not found by xpath {} ", Xpath);
		}
		return elements;

	}
	/**
	 * 获取工程img文件夹中，jpg的文件列表，将路径名存入数组
	 * @return
	 */

	public String[] getImgPaths(){
		// 获取img所在路径
		String path = System.getProperty("user.dir")
				+ "\\src\\main\\resources\\img";
		int i = 0;
		// 表示要遍历的文件夹为当前文件夹
		File f = new File(path);
		// 将文件夹中的文件名放入数组中
		File[] sf = f.listFiles();
		String paths[] =  f.list();
		// 开始遍历文件夹
		for (File s : sf) {
			// 打印文件名
			String[] p = s.getName().split("\\.");
			// 判断文件有无扩展名
			if (p.length > 0) {
				// 判断文件扩展名
				if("jpg".equals(p[p.length - 1])){
					paths[i] = s.getPath();
				}else{
					continue;
				}
			}
		i++;
		}
		return paths;
	}
	/**
	 * 获取img图片路径，判断是否与剪切板中的一样
	 * 一样的时候取路径数组中的下一个路径
	 * @return
	 */
	public String getPath(){
		// 获取img的图片列表
		String[] paths = getImgPaths();
		int size = paths.length;
		Clipboard sysClip = null;
		Transferable tran = null;
		Object clipboardContent = null;
		// 拿到剪切板
		sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
		tran = sysClip.getContents(null);
		// 拿到剪切板中的内容
		try {
			clipboardContent = tran.getTransferData(DataFlavor.stringFlavor);
		} catch (Exception e) {
			return paths[0];
		}
		// 遍历图片路径列表
		// 比对是否与图片路径，与剪切板中的内容
		for (int i = 0; i < size; i++) {
			if (paths[i].equals(clipboardContent.toString())) {
				if (i == size - 1) {
					return paths[0];
				} else {
					return paths[i + 1];
				}
			}
		}
		return paths[0];
	}
}
